precompile(Tuple{Type{Base.Multimedia.TextDisplay}, Base.PipeEndpoint})
precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.PipeEndpoint, Base.PipeEndpoint, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.something), Nothing, Base.PipeEndpoint})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(URIs.__init__)})
precompile(Tuple{typeof(JuliaCLI.server)})
precompile(Tuple{typeof(Base.something), String, String, Vararg{String}})
precompile(Tuple{typeof(Base.keys), Base.Dict{Symbol, SymbolServer.ModuleStore}})
precompile(Tuple{Type{StaticLint.LintOptions}, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.convert), Type{StaticLint.LintOptions}, StaticLint.LintOptions})
precompile(Tuple{JuliaCLI.var"##runserver#4", Base.PipeEndpoint, Base.PipeEndpoint, Bool, typeof(JuliaCLI.runserver), String, String})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(Symbol("pwd()"), :env, :depot), Tuple{String, String, String}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.displaysize), Base.PipeEndpoint})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, String, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(Symbol("pwd()"), :env, :depot), Tuple{String, String, String}}}})
precompile(Tuple{typeof(Logging.showvalue), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, String, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(Symbol("pwd()"), :env, :depot), Tuple{String, String, String}}}, Int64})
precompile(Tuple{Base.var"##printstyled#917", Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Symbol, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Symbol, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Symbol, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{SymbolServer.MethodStore, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SymbolServer.MethodStore, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Pair{Any, Any}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Pair{Any, Any}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Any, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.run), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{JSONRPC.var"#1#3"{JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}}})
precompile(Tuple{JSONRPC.var"#2#4"{JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}}})
precompile(Tuple{typeof(Base.:(<)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(>)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(!=)), UInt32, UInt32})
precompile(Tuple{Type{SymbolServer.FakeTypeofVararg}})
precompile(Tuple{typeof(SymbolServer.parsed_toml), Nothing})
precompile(Tuple{Type{LanguageServer.WorkDoneProgressEnd}, Base.Missing})
precompile(Tuple{LanguageServer.var"#94#96"{LanguageServer.LanguageServerInstance}})
precompile(Tuple{Type{NamedTuple{(:type,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{LanguageServer.var"#100#103"{LanguageServer.LanguageServerInstance}})
precompile(Tuple{LanguageServer.var"#101#104"{LanguageServer.LanguageServerInstance}})
precompile(Tuple{Type{NamedTuple{(:backlog,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:backlog,), Tuple{Int64}}, Symbol})
precompile(Tuple{typeof(Sockets.uv_connectioncb), Ptr{Nothing}, Int32})
precompile(Tuple{SymbolServer.var"#62#65"{LanguageServer.var"#95#97"{LanguageServer.LanguageServerInstance}, Nothing, Base.Channel{Any}, String}})
precompile(Tuple{typeof(Base.setproperty!), SymbolServer.SymbolServerInstance, Symbol, Base.Process})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.notify), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{Type{NamedTuple{(:type, :msg), T} where T<:Tuple}, Tuple{Symbol, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, NamedTuple{(:type, :msg), Tuple{Symbol, Base.Dict{String, Any}}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:type, :msg), Tuple{Symbol, Base.Dict{String, Any}}}, Symbol})
precompile(Tuple{typeof(JSONRPC.dispatch_msg), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, JSONRPC.MsgDispatcher, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.get), Base.Dict{String, JSONRPC.Handler}, String, Nothing})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.RequestType{LanguageServer.InitializeParams, LanguageServer.InitializeResult}})
precompile(Tuple{Type{LanguageServer.InitializeParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.InfoParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.InfoParams}, String, String})
precompile(Tuple{Type{LanguageServer.URIs2.URI}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Nothing, Nothing})
precompile(Tuple{Type{LanguageServer.ClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.WorkspaceClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.WorkspaceEditClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{Any, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{String}, Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{String}, Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.argtail), Function, Function, Vararg{Function}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{String}, Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{String}, Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{String}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{String, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{String}, Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{LanguageServer.WorkspaceEditClientCapabilities}, Base.Missing, Array{String, 1}, Base.Missing})
precompile(Tuple{Type{LanguageServer.WorkspaceSymbolClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.SymbolKindCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Int64}, Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Int64}, Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.cconvert), Type, Base.MPFR.MPFRRoundingMode})
precompile(Tuple{typeof(Base.convert), Type{Base.MPFR.MPFRRoundingMode}, Base.MPFR.MPFRRoundingMode})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Base.MPFR.MPFRRoundingMode}, Base.MPFR.MPFRRoundingMode})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{Int64}, Tuple{Array{Any, 1}}}})
precompile(Tuple{Type{LanguageServer.SymbolKindCapabilities}, Array{Int64, 1}})
precompile(Tuple{Type{LanguageServer.WorkspaceSymbolClientCapabilities}, Bool, LanguageServer.SymbolKindCapabilities})
precompile(Tuple{Type{LanguageServer.WorkspaceClientCapabilities}, Bool, LanguageServer.WorkspaceEditClientCapabilities, Base.Missing, Base.Missing, LanguageServer.WorkspaceSymbolClientCapabilities, Base.Missing, Bool, Bool})
precompile(Tuple{Type{LanguageServer.TextDocumentClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TextDocumentSyncClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TextDocumentSyncClientCapabilities}, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{LanguageServer.CompletionClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CompletionItemClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CompletionItemClientCapabilities}, Bool, Bool, Array{String, 1}, Bool, Bool, Base.Missing})
precompile(Tuple{Type{LanguageServer.CompletionItemKindCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CompletionItemKindCapabilities}, Array{Int64, 1}})
precompile(Tuple{Type{LanguageServer.CompletionClientCapabilities}, Bool, LanguageServer.CompletionItemClientCapabilities, LanguageServer.CompletionItemKindCapabilities, Bool})
precompile(Tuple{Type{LanguageServer.HoverClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.HoverClientCapabilities}, Bool, Array{String, 1}})
precompile(Tuple{Type{LanguageServer.SignatureHelpClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.SignatureInformationCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.ParameterInformationCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.ParameterInformationCapabilities}, Bool})
precompile(Tuple{Type{LanguageServer.SignatureInformationCapabilities}, Array{String, 1}, LanguageServer.ParameterInformationCapabilities})
precompile(Tuple{Type{LanguageServer.SignatureHelpClientCapabilities}, Bool, LanguageServer.SignatureInformationCapabilities, Base.Missing})
precompile(Tuple{Type{LanguageServer.DeclarationClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DeclarationClientCapabilities}, Base.Missing, Bool})
precompile(Tuple{Type{LanguageServer.DefinitionClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DefinitionClientCapabilities}, Base.Missing, Bool})
precompile(Tuple{Type{LanguageServer.TypeDefinitionClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TypeDefinitionClientCapabilities}, Base.Missing, Bool})
precompile(Tuple{Type{LanguageServer.ImplementationClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.ImplementationClientCapabilities}, Base.Missing, Bool})
precompile(Tuple{Type{LanguageServer.ReferenceClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.ReferenceClientCapabilities}, Bool})
precompile(Tuple{Type{LanguageServer.DocumentHighlightClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DocumentHighlightClientCapabilities}, Bool})
precompile(Tuple{Type{LanguageServer.DocumentSymbolClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.DocumentSymbolClientCapabilities}, Bool, LanguageServer.SymbolKindCapabilities, Bool})
precompile(Tuple{Type{LanguageServer.CodeActionClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CodeActionLiteralCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CodeActionKindCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CodeActionClientCapabilities}, Bool, LanguageServer.CodeActionLiteralCapabilities, Bool})
precompile(Tuple{Type{LanguageServer.RenameClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.RenameClientCapabilities}, Bool, Bool})
precompile(Tuple{Type{LanguageServer.PublishDiagnosticsClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TagClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.PublishDiagnosticsClientCapabilities}, Bool, LanguageServer.TagClientCapabilities, Base.Missing})
precompile(Tuple{Type{LanguageServer.WindowClientCapabilities}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.WindowClientCapabilities}, Bool})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{LanguageServer.WorkspaceFolder}, Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{LanguageServer.WorkspaceFolder}, Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{LanguageServer.WorkspaceFolder}, Tuple{Array{Any, 1}}}})
precompile(Tuple{Type{LanguageServer.WorkspaceFolder}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.InitializeParams}, Int64, LanguageServer.InfoParams, String, LanguageServer.URIs2.URI, Base.Dict{String, Any}, LanguageServer.ClientCapabilities, String, Array{LanguageServer.WorkspaceFolder, 1}, Base.Missing})
precompile(Tuple{Type{JSONRPC.JSONRPCError}, Int64, String, Nothing})
precompile(Tuple{typeof(Base.getproperty), Base.Missing, Symbol})
precompile(Tuple{Type{LanguageServer.SaveOptions}, Bool})
precompile(Tuple{Type{LanguageServer.TextDocumentSyncOptions}, Bool, Int64, Bool, Bool, LanguageServer.SaveOptions})
precompile(Tuple{Type{LanguageServer.DocumentLinkOptions}, Bool, Base.Missing})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, LanguageServer.ServerAction}})
precompile(Tuple{Type{LanguageServer.WorkspaceFoldersOptions}, Bool, Bool})
precompile(Tuple{Type{LanguageServer.WorkspaceOptions}, LanguageServer.WorkspaceFoldersOptions})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.initialize_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.InitializeParams})
precompile(Tuple{typeof(JSONRPC.get_return_type), JSONRPC.RequestType{LanguageServer.InitializeParams, LanguageServer.InitializeResult}})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, LanguageServer.InitializeResult})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, LanguageServer.InitializeResult}}})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.InitializeResult})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.InitializeResult, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.ServerCapabilities})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.ServerCapabilities, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.TextDocumentSyncOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.TextDocumentSyncOptions, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Bool})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.SaveOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.SaveOptions, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.CompletionOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.CompletionOptions, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{String, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.SignatureHelpOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.SignatureHelpOptions, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.DocumentLinkOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.DocumentLinkOptions, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.RenameOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.RenameOptions, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.ExecuteCommandOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.ExecuteCommandOptions, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.WorkspaceOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkspaceOptions, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.WorkspaceFoldersOptions})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkspaceFoldersOptions, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(JSONRPC.write_transport_layer), Base.PipeEndpoint, String})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.NotificationType{LanguageServer.InitializedParams}})
precompile(Tuple{Type{LanguageServer.InitializedParams}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:onerror,), Tuple{LanguageServer.var"#222#223"}}, Symbol})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:onerror,), Tuple{LanguageServer.var"#224#225"}}, Symbol})
precompile(Tuple{Type{LanguageServer.ConfigurationItem}, Base.Missing, String})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.initialized_notification), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.InitializedParams})
precompile(Tuple{Base.Filesystem.var"#_walkdir#29"{Bool, Bool, LanguageServer.var"#222#223"}, Base.Channel{Tuple{String, Array{String, 1}, Array{String, 1}}}, String})
precompile(Tuple{Base.Filesystem.var"#_walkdir#29"{Bool, Bool, LanguageServer.var"#224#225"}, Base.Channel{Tuple{String, Array{String, 1}, Array{String, 1}}}, String})
precompile(Tuple{typeof(CSTParser.parse_blockexpr), CSTParser.ParseState, Symbol})
precompile(Tuple{typeof(CSTParser.get_prec), Nothing})
precompile(Tuple{typeof(CSTParser.LtoR), Int64})
precompile(Tuple{typeof(Base.:(-)), Int64, Bool})
precompile(Tuple{typeof(CSTParser.parse_compound_recur), CSTParser.ParseState, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.loop_check), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(CSTParser._unescape_string), String})
precompile(Tuple{typeof(CSTParser._unescape_string), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.prevind), String, Int64})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, LanguageServer.Document})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.collect), Base.KeySet{String, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Array{String, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.getproperty), LanguageServer.LanguageServerInstance, Symbol})
precompile(Tuple{typeof(Base.getproperty), StaticLint.Meta, Symbol})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, Nothing})
precompile(Tuple{typeof(StaticLint.bindingof), Nothing})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, StaticLint.Scope})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, StaticLint.Scope}}, StaticLint.Scope})
precompile(Tuple{Type{StaticLint.Toplevel{T} where T}, LanguageServer.Document, Array{String, 1}, StaticLint.Scope, Bool, Nothing, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}, StaticLint.ExternalEnv, LanguageServer.LanguageServerInstance})
precompile(Tuple{typeof(StaticLint.handle_macro), CSTParser.EXPR, StaticLint.Toplevel{LanguageServer.Document}})
precompile(Tuple{Type{StaticLint.Binding}, CSTParser.EXPR, SymbolServer.FunctionStore, SymbolServer.DataTypeStore, Array{Any, 1}})
precompile(Tuple{typeof(StaticLint.traverse), CSTParser.EXPR, StaticLint.Toplevel{LanguageServer.Document}})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, StaticLint.Binding})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, StaticLint.Binding}}, StaticLint.Binding})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, StaticLint.Binding, SymbolServer.SymStore}}, StaticLint.Binding})
precompile(Tuple{typeof(StaticLint._get_field), Base.Dict{Symbol, SymbolServer.ModuleStore}, CSTParser.EXPR, StaticLint.Toplevel{LanguageServer.Document}})
precompile(Tuple{typeof(StaticLint.scopeof), Nothing})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, SymbolServer.ModuleStore}, Symbol})
precompile(Tuple{typeof(StaticLint._mark_import_arg), CSTParser.EXPR, Nothing, StaticLint.Toplevel{LanguageServer.Document}, Bool})
precompile(Tuple{Type{StaticLint.Delayed}, StaticLint.Scope, StaticLint.ExternalEnv, LanguageServer.LanguageServerInstance})
precompile(Tuple{Type{SymbolServer.VarRef}, Nothing, Symbol})
precompile(Tuple{typeof(StaticLint.add_binding), CSTParser.EXPR, StaticLint.Delayed, StaticLint.Scope})
precompile(Tuple{typeof(StaticLint.handle_macro), CSTParser.EXPR, StaticLint.Delayed})
precompile(Tuple{Type{SymbolServer.VarRef}, SymbolServer.VarRef, Symbol})
precompile(Tuple{typeof(StaticLint.scopes), CSTParser.EXPR, StaticLint.Delayed})
precompile(Tuple{typeof(StaticLint.setref!), CSTParser.EXPR, SymbolServer.FunctionStore})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, SymbolServer.FunctionStore})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, StaticLint.Binding, SymbolServer.SymStore}}, SymbolServer.FunctionStore})
precompile(Tuple{typeof(Base.getindex), Array{CSTParser.EXPR, 1}, Int64})
precompile(Tuple{typeof(StaticLint.setref!), CSTParser.EXPR, SymbolServer.GenericStore})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, SymbolServer.GenericStore})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, StaticLint.Binding, SymbolServer.SymStore}}, SymbolServer.GenericStore})
precompile(Tuple{typeof(StaticLint.setref!), CSTParser.EXPR, SymbolServer.DataTypeStore})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, SymbolServer.DataTypeStore})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, StaticLint.Binding, SymbolServer.SymStore}}, SymbolServer.DataTypeStore})
precompile(Tuple{typeof(StaticLint.iterate_over_ss_methods), SymbolServer.FunctionStore, StaticLint.Scope, StaticLint.ExternalEnv, StaticLint.var"#31#33"{Array{Any, 1}, Int64}})
precompile(Tuple{typeof(StaticLint.traverse), CSTParser.EXPR, StaticLint.LooseRefs})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), CSTParser.EXPR, CSTParser.EXPR})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, StaticLint.LintCodes})
precompile(Tuple{typeof(StaticLint.CoreTypes.isfunction), SymbolServer.DataTypeStore})
precompile(Tuple{typeof(StaticLint.is_something_with_methods), SymbolServer.FunctionStore})
precompile(Tuple{typeof(StaticLint.sig_match_any), SymbolServer.FunctionStore, CSTParser.EXPR, Tuple{Int64, Int64, Array{Symbol, 1}}, StaticLint.Scope, StaticLint.ExternalEnv})
precompile(Tuple{typeof(StaticLint.CoreTypes.isva), SymbolServer.FakeTypeName})
precompile(Tuple{typeof(StaticLint.CoreTypes.isva), SymbolServer.FakeTypeofVararg})
precompile(Tuple{typeof(StaticLint.is_something_with_methods), SymbolServer.DataTypeStore})
precompile(Tuple{typeof(StaticLint.sig_match_any), SymbolServer.DataTypeStore, CSTParser.EXPR, Tuple{Int64, Int64, Array{Symbol, 1}}, StaticLint.Scope, StaticLint.ExternalEnv})
precompile(Tuple{typeof(StaticLint.collect_hints), CSTParser.EXPR, StaticLint.ExternalEnv, Symbol})
precompile(Tuple{typeof(Base.getproperty), CSTParser.EXPR, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{StaticLint.LintCodes, String}, StaticLint.LintCodes, String})
precompile(Tuple{typeof(Base.in), StaticLint.LintCodes, Tuple{StaticLint.LintCodes, StaticLint.LintCodes, StaticLint.LintCodes}})
precompile(Tuple{typeof(Base.Enums.namemap), Type{StaticLint.LintCodes}})
precompile(Tuple{typeof(Base.string), StaticLint.LintCodes})
precompile(Tuple{Type{LanguageServer.Diagnostic}, LanguageServer.Range, Int64, String, Base.Missing, String, String, Array{Int64, 1}, Base.Missing})
precompile(Tuple{typeof(LanguageServer.publish_diagnostics), LanguageServer.Document, LanguageServer.LanguageServerInstance, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.PublishDiagnosticsParams})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.PublishDiagnosticsParams, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.URIs2.URI})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, String}, URIs.var"#14#15"}, URIs.var"#16#17"{typeof(URIs.ispathsafe)}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{LanguageServer.Diagnostic, 1}})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.Meta, Symbol, SymbolServer.ModuleStore})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, StaticLint.Binding, SymbolServer.SymStore}}, SymbolServer.ModuleStore})
precompile(Tuple{typeof(StaticLint.resolve_getfield), CSTParser.EXPR, SymbolServer.ModuleStore, StaticLint.Toplevel{LanguageServer.Document}})
precompile(Tuple{typeof(Base.getproperty), SymbolServer.ModuleStore, Symbol})
precompile(Tuple{typeof(Base.getproperty), SymbolServer.DataTypeStore, Symbol})
precompile(Tuple{typeof(Base.getproperty), SymbolServer.FakeTypeName, Symbol})
precompile(Tuple{typeof(Base.getproperty), SymbolServer.FunctionStore, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, SymbolServer.ModuleStore}}, Base.Generator{Base.Dict{Symbol, SymbolServer.ModuleStore}, SymbolServer.var"#43#44"}})
precompile(Tuple{SymbolServer.var"#43#44", Pair{Symbol, SymbolServer.ModuleStore}})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.FunctionStore})
precompile(Tuple{typeof(SymbolServer.recursive_copy), Symbol})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.FakeUnion})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.FakeTypeName})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.DataTypeStore})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.FakeUnionAll})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.FakeTypeofBottom})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.FakeTypeofVararg})
precompile(Tuple{Type{SymbolServer.FakeTypeofVararg}, SymbolServer.FakeTypeName})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.GenericStore})
precompile(Tuple{typeof(SymbolServer.recursive_copy), Int64})
precompile(Tuple{typeof(SymbolServer.recursive_copy), SymbolServer.ModuleStore})
precompile(Tuple{Type{SymbolServer.FakeTypeofVararg}, SymbolServer.FakeUnion})
precompile(Tuple{Type{SymbolServer.FakeTypeofVararg}, SymbolServer.FakeUnionAll})
precompile(Tuple{Type{SymbolServer.FakeTypeofVararg}, SymbolServer.FakeTypeVar})
precompile(Tuple{typeof(SymbolServer.recursive_copy), Bool})
precompile(Tuple{typeof(SymbolServer.load_package_from_cache_into_store!), SymbolServer.SymbolServerInstance, Base.UUID, String, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Base.Dict{Symbol, SymbolServer.ModuleStore}, LanguageServer.var"#95#97"{LanguageServer.LanguageServerInstance}, Int64})
precompile(Tuple{typeof(StaticLint.resolve_import_block), CSTParser.EXPR, StaticLint.Toplevel{LanguageServer.Document}, Nothing, Bool})
precompile(Tuple{typeof(StaticLint._get_field), Nothing, CSTParser.EXPR, StaticLint.Toplevel{LanguageServer.Document}})
precompile(Tuple{typeof(Base.getindex), String, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{LanguageServer.Document, StaticLint.ExternalEnv}, LanguageServer.Document})
precompile(Tuple{typeof(Base.delete!), Base.Dict{LanguageServer.Document, StaticLint.ExternalEnv}, LanguageServer.Document})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, StaticLint.Scope}}, Nothing})
precompile(Tuple{typeof(Base.replace), String, Pair{String, String}})
precompile(Tuple{typeof(CSTParser.parse_try), CSTParser.ParseState})
precompile(Tuple{typeof(StaticLint.resolve_getfield), CSTParser.EXPR, SymbolServer.ModuleStore, StaticLint.Delayed})
precompile(Tuple{typeof(StaticLint.settype!), StaticLint.Binding, SymbolServer.DataTypeStore})
precompile(Tuple{typeof(StaticLint.resolve_getfield), CSTParser.EXPR, SymbolServer.FunctionStore, StaticLint.Delayed})
precompile(Tuple{typeof(StaticLint.get_root_method), SymbolServer.FunctionStore, LanguageServer.LanguageServerInstance})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(!=)), SymbolServer.FakeTypeName, SymbolServer.VarRef})
precompile(Tuple{typeof(Base.in), SymbolServer.FakeTypeName, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeTypeName, SymbolServer.FakeTypeName})
precompile(Tuple{typeof(Base.:(!=)), SymbolServer.FakeUnion, SymbolServer.VarRef})
precompile(Tuple{typeof(Base.in), SymbolServer.FakeUnion, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeTypeName, SymbolServer.FakeUnion})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeUnion, SymbolServer.FakeUnion})
precompile(Tuple{typeof(Base.:(!=)), SymbolServer.FakeUnionAll, SymbolServer.VarRef})
precompile(Tuple{typeof(Base.in), SymbolServer.FakeUnionAll, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeTypeName, SymbolServer.FakeUnionAll})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeUnion, SymbolServer.FakeUnionAll})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeUnionAll, SymbolServer.FakeUnionAll})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeTypeofBottom, SymbolServer.FakeTypeofBottom})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeUnion, SymbolServer.FakeTypeName})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeUnionAll, SymbolServer.FakeTypeName})
precompile(Tuple{typeof(Base.haskey), SymbolServer.ModuleStore, Symbol})
precompile(Tuple{typeof(Base.iterate), Array{SymbolServer.MethodStore, 1}})
precompile(Tuple{StaticLint.var"#31#33"{Array{Any, 1}, Int64}, SymbolServer.MethodStore})
precompile(Tuple{typeof(Base.iterate), Array{SymbolServer.MethodStore, 1}, Int64})
precompile(Tuple{typeof(Base.:(!=)), SymbolServer.FakeTypeofVararg, SymbolServer.VarRef})
precompile(Tuple{typeof(Base.in), SymbolServer.FakeTypeofVararg, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.FakeTypeofVararg, SymbolServer.FakeTypeofVararg})
precompile(Tuple{typeof(StaticLint.resolve_getfield), CSTParser.EXPR, StaticLint.Binding, StaticLint.Delayed})
precompile(Tuple{typeof(Base.length), Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(StaticLint.CoreTypes.isva), SymbolServer.FakeTypeVar})
precompile(Tuple{typeof(Base.push!), Array{Symbol, 1}, Symbol})
precompile(Tuple{typeof(Base.getproperty), StaticLint.Binding, Symbol})
precompile(Tuple{typeof(Base.keys), Array{Any, 1}})
precompile(Tuple{typeof(Base.iterate), Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}})
precompile(Tuple{typeof(StaticLint.CoreTypes.isva), SymbolServer.FakeUnion})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.ConfigurationParams})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.ConfigurationParams, Tuple{Symbol}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.ConfigurationItem, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, String})
precompile(Tuple{Type{Array{SymbolServer.MethodStore, 1}}, UndefInitializer, Int64})
precompile(Tuple{Type{SymbolServer.GenericStore}, SymbolServer.VarRef, SymbolServer.FakeTypeName, String, Bool})
precompile(Tuple{Type{SymbolServer.FakeTypeVar}, Symbol, SymbolServer.FakeTypeofBottom, SymbolServer.FakeTypeName})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SymbolServer.FakeUnion})
precompile(Tuple{typeof(Base.setindex!), Array{Pair{Any, Any}, 1}, Pair{Symbol, SymbolServer.FakeUnion}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SymbolServer.FakeTypeName})
precompile(Tuple{typeof(Base.setindex!), Array{Pair{Any, Any}, 1}, Pair{Symbol, SymbolServer.FakeTypeName}, Int64})
precompile(Tuple{Type{SymbolServer.MethodStore}, Symbol, Symbol, String, UInt32, Array{Pair{Any, Any}, 1}, Array{Symbol, 1}, SymbolServer.FakeTypeName})
precompile(Tuple{typeof(Base.setindex!), Array{SymbolServer.MethodStore, 1}, SymbolServer.MethodStore, Int64})
precompile(Tuple{Type{SymbolServer.FakeUnionAll}, SymbolServer.FakeTypeVar, SymbolServer.FakeTypeName})
precompile(Tuple{Type{SymbolServer.FakeUnionAll}, SymbolServer.FakeTypeVar, SymbolServer.FakeUnionAll})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SymbolServer.FakeUnionAll})
precompile(Tuple{typeof(Base.setindex!), Array{Pair{Any, Any}, 1}, Pair{Symbol, SymbolServer.FakeUnionAll}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{String, Base.Channel{Any}}, String})
precompile(Tuple{typeof(JSONRPC.typed_res), Array{Any, 1}, Type{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.something), Tuple{Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}}}}, Function, Tuple{Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}}, Nothing})
precompile(Tuple{typeof(Base.axes), Tuple})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.something), Tuple{Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}}}})
precompile(Tuple{typeof(Base.tail), Tuple{Tuple{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, Tuple{Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.something), Nothing, Bool})
precompile(Tuple{Type{StaticLint.LintOptions}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing})
precompile(Tuple{typeof(Base.something), Nothing, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, LanguageServer.var"#156#157"{LanguageServer.LanguageServerInstance, StaticLint.LintOptions}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.any), Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, LanguageServer.var"#156#157"{LanguageServer.LanguageServerInstance, StaticLint.LintOptions}}})
precompile(Tuple{typeof(Base.:(!=)), Symbol, Symbol})
precompile(Tuple{typeof(Base.:(!=)), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), LanguageServer.LanguageServerInstance, Symbol, StaticLint.LintOptions})
precompile(Tuple{typeof(Base.setproperty!), LanguageServer.LanguageServerInstance, Symbol, Bool})
precompile(Tuple{typeof(Base.setproperty!), LanguageServer.LanguageServerInstance, Symbol, Symbol})
precompile(Tuple{typeof(Base.setproperty!), LanguageServer.LanguageServerInstance, Symbol, Array{String, 1}})
precompile(Tuple{typeof(JSONRPC.send), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, JSONRPC.RequestType{LanguageServer.WorkDoneProgressCreateParams, Nothing}, LanguageServer.WorkDoneProgressCreateParams})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.WorkDoneProgressCreateParams})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkDoneProgressCreateParams, Tuple{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{typeof(JSONRPC.send), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, JSONRPC.NotificationType{LanguageServer.ProgressParams{T} where T}, LanguageServer.ProgressParams{LanguageServer.WorkDoneProgressBegin}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.ProgressParams{LanguageServer.WorkDoneProgressBegin}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.WorkDoneProgressBegin})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkDoneProgressBegin, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.NotificationType{LanguageServer.DidOpenTextDocumentParams}})
precompile(Tuple{Type{LanguageServer.DidOpenTextDocumentParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TextDocumentItem}, Base.Dict{String, Any}})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.textDocument_didOpen_notification), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.DidOpenTextDocumentParams})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, StaticLint.Binding}}, Nothing})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SymbolServer.FakeTypeofVararg})
precompile(Tuple{typeof(Base.setindex!), Array{Pair{Any, Any}, 1}, Pair{Symbol, SymbolServer.FakeTypeofVararg}, Int64})
precompile(Tuple{Type{SymbolServer.FakeTypeVar}, Symbol, SymbolServer.FakeTypeofBottom, SymbolServer.FakeUnionAll})
precompile(Tuple{Type{Pair{A, B} where B where A}, Symbol, SymbolServer.FakeTypeVar})
precompile(Tuple{typeof(Base.setindex!), Array{Pair{Any, Any}, 1}, Pair{Symbol, SymbolServer.FakeTypeVar}, Int64})
precompile(Tuple{typeof(Base.getproperty), SymbolServer.Package, Symbol})
precompile(Tuple{typeof(JSONRPC.send), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, JSONRPC.NotificationType{LanguageServer.ProgressParams{T} where T}, LanguageServer.ProgressParams{LanguageServer.WorkDoneProgressReport}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.ProgressParams{LanguageServer.WorkDoneProgressReport}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.WorkDoneProgressReport})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkDoneProgressReport, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64}, Char})
precompile(Tuple{typeof(Base.string), Module})
precompile(Tuple{Type{SymbolServer.FakeTypeVar}, Symbol, SymbolServer.FakeTypeofBottom, SymbolServer.FakeUnion})
precompile(Tuple{Type{SymbolServer.FakeUnionAll}, SymbolServer.FakeTypeVar, SymbolServer.FakeUnion})
precompile(Tuple{Type{SymbolServer.FakeTypeVar}, Symbol, SymbolServer.FakeTypeofBottom, SymbolServer.FakeTypeVar})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SHA1})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, Base.var"#194#195"{SymbolServer.CacheStore.var"#1#3"{Base.IOStream}}}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Base.UnitRange{Int64}, Base.var"#194#195"{SymbolServer.CacheStore.var"#1#3"{Base.IOStream}}}, Int64})
precompile(Tuple{typeof(JSONRPC.send), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, JSONRPC.NotificationType{LanguageServer.ProgressParams{T} where T}, LanguageServer.ProgressParams{LanguageServer.WorkDoneProgressEnd}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.ProgressParams{LanguageServer.WorkDoneProgressEnd}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.WorkDoneProgressEnd})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkDoneProgressEnd, Tuple{Symbol}})
precompile(Tuple{typeof(Base.push!), Base.Channel{Any}, Base.Dict{Symbol, SymbolServer.ModuleStore}})
precompile(Tuple{Type{NamedTuple{(:type, :msg), T} where T<:Tuple}, Tuple{Symbol, Base.Dict{Symbol, SymbolServer.ModuleStore}}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, NamedTuple{(:type, :msg), Tuple{Symbol, Base.Dict{Symbol, SymbolServer.ModuleStore}}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:type, :msg), Tuple{Symbol, Base.Dict{Symbol, SymbolServer.ModuleStore}}}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), StaticLint.ExternalEnv, Symbol, Base.Dict{Symbol, SymbolServer.ModuleStore}})
precompile(Tuple{typeof(Base.deleteat!), Array{Any, 1}, Int64})
precompile(Tuple{typeof(StaticLint._mark_import_arg), CSTParser.EXPR, SymbolServer.ModuleStore, StaticLint.Toplevel{LanguageServer.Document}, Bool})
precompile(Tuple{typeof(Base.getproperty), SymbolServer.GenericStore, Symbol})
precompile(Tuple{typeof(StaticLint.resolve_import_block), CSTParser.EXPR, StaticLint.Toplevel{LanguageServer.Document}, SymbolServer.ModuleStore, Bool})
precompile(Tuple{typeof(StaticLint._get_field), SymbolServer.ModuleStore, CSTParser.EXPR, StaticLint.Toplevel{LanguageServer.Document}})
precompile(Tuple{typeof(Base.getindex), SymbolServer.ModuleStore, Symbol})
precompile(Tuple{typeof(StaticLint._mark_import_arg), CSTParser.EXPR, SymbolServer.FunctionStore, StaticLint.Toplevel{LanguageServer.Document}, Bool})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.Diagnostic, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.Range})
precompile(Tuple{Type{LanguageServer.Diagnostic}, LanguageServer.Range, Int64, String, Base.Missing, String, String, Base.Missing, Base.Missing})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.Diagnostic, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{Int64, 1}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.Diagnostic, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(StaticLint.CoreTypes.isdatatype), SymbolServer.DataTypeStore})
precompile(Tuple{typeof(StaticLint.is_never_datatype), SymbolServer.DataTypeStore, StaticLint.ExternalEnv})
precompile(Tuple{typeof(Base.:(==)), SymbolServer.DataTypeStore, SymbolServer.DataTypeStore})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.RequestType{LanguageServer.DocumentFormattingParams, Union{Nothing, Array{LanguageServer.TextEdit, 1}}}})
precompile(Tuple{Type{LanguageServer.DocumentFormattingParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TextDocumentIdentifier}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.FormattingOptions}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.FormattingOptions}, Int64, Bool, Base.Missing, Base.Missing, Base.Missing})
precompile(Tuple{Type{NamedTuple{(:by, :rev), T} where T<:Tuple}, Tuple{typeof(Base.length), Bool}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:by, :rev), Tuple{typeof(Base.length), Bool}}})
precompile(Tuple{typeof(Base.tail), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.tail), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.tail), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.tail), Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{LanguageServer.Position}, Int64, Int64})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.textDocument_formatting_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.DocumentFormattingParams})
precompile(Tuple{Type{NamedTuple{(:indent, :annotate_untyped_fields_with_any, :join_lines_based_on_source, :trailing_comma, :margin, :always_for_in, :whitespace_in_kwargs), T} where T<:Tuple}, Tuple{Int64, Bool, Bool, Nothing, Int64, Nothing, Bool}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Base.var"##s83#216", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:indent, :annotate_untyped_fields_with_any, :join_lines_based_on_source, :trailing_comma, :margin, :always_for_in, :whitespace_in_kwargs), Tuple{Int64, Bool, Bool, Nothing, Int64, Nothing, Bool}}}})
precompile(Tuple{typeof(JuliaFormatter.options), JuliaFormatter.DefaultStyle})
precompile(Tuple{JuliaFormatter.var"#format_text##kw", NamedTuple{(:indent, :annotate_untyped_fields_with_any, :join_lines_based_on_source, :trailing_comma, :margin, :always_for_in, :whitespace_in_kwargs), Tuple{Int64, Bool, Bool, Nothing, Int64, Nothing, Bool}}, typeof(JuliaFormatter.format_text), String})
precompile(Tuple{typeof(CSTParser.is_nothing), CSTParser.EXPR})
precompile(Tuple{typeof(JuliaFormatter.p_file), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_module), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_keyword), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_identifier), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_block), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_import), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(CSTParser.is_colon), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_comma), CSTParser.EXPR})
precompile(Tuple{typeof(JuliaFormatter.p_unaryopcall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_using), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_functiondef), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.is_opener), CSTParser.EXPR})
precompile(Tuple{typeof(JuliaFormatter.p_call), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_punctuation), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(CSTParser.ispunctuation), CSTParser.EXPR})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.push!), Array{CSTParser.EXPR, 1}, CSTParser.EXPR})
precompile(Tuple{typeof(JuliaFormatter.is_punc), CSTParser.EXPR})
precompile(Tuple{JuliaFormatter.var"#pretty##kw", NamedTuple{(:ignore_single_line,), Tuple{Bool}}, typeof(JuliaFormatter.pretty), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{JuliaFormatter.var"#p_block##kw", NamedTuple{(:ignore_single_line,), Tuple{Bool}}, typeof(JuliaFormatter.p_block), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_literal), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_vect), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(Tokenize.Tokens.isoperator), CSTParser.EXPR})
precompile(Tuple{typeof(JuliaFormatter.p_binaryopcall), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.is_opcall), CSTParser.EXPR})
precompile(Tuple{typeof(JuliaFormatter.is_binaryop_nestable), JuliaFormatter.DefaultStyle, CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_exor), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.isnumber), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_in), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_elof), CSTParser.EXPR})
precompile(Tuple{typeof(CSTParser.is_anon_func), CSTParser.EXPR})
precompile(Tuple{typeof(Base.in), String, Base.Set{String}})
precompile(Tuple{typeof(JuliaFormatter.p_operator), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(CSTParser.is_pairarrow), CSTParser.EXPR})
precompile(Tuple{typeof(JuliaFormatter.p_quotenode), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.p_return), JuliaFormatter.DefaultStyle, CSTParser.EXPR, JuliaFormatter.State})
precompile(Tuple{typeof(Base.getproperty), JuliaFormatter.FST, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Int64, Tuple{Int64, String}}, Int64})
precompile(Tuple{Type{JuliaFormatter.FST}, JuliaFormatter.FNode, Int64, Int64, Int64, Int64, String, Nothing, Nothing, JuliaFormatter.NestBehavior, Int64, Int64, Nothing})
precompile(Tuple{JuliaFormatter.var"#nest!##kw", NamedTuple{(:extra_margin,), Tuple{Int64}}, typeof(JuliaFormatter.nest!), JuliaFormatter.DefaultStyle, Array{JuliaFormatter.FST, 1}, JuliaFormatter.State, Int64})
precompile(Tuple{typeof(JuliaFormatter.n_block!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_import!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_call!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_vect!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(JuliaFormatter.n_binaryopcall!), JuliaFormatter.DefaultStyle, JuliaFormatter.FST, JuliaFormatter.State})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}})
precompile(Tuple{typeof(Base.count), String, String})
precompile(Tuple{typeof(Base.count), Base.Regex, String})
precompile(Tuple{typeof(JSONRPC.get_return_type), JSONRPC.RequestType{LanguageServer.DocumentFormattingParams, Union{Nothing, Array{LanguageServer.TextEdit, 1}}}})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Array{LanguageServer.TextEdit, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Array{LanguageServer.TextEdit, 1}}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{LanguageServer.TextEdit, 1}})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.NotificationType{LanguageServer.DidChangeTextDocumentParams}})
precompile(Tuple{Type{LanguageServer.DidChangeTextDocumentParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.VersionedTextDocumentIdentifier}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.VersionedTextDocumentIdentifier}, LanguageServer.URIs2.URI, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{LanguageServer.TextDocumentContentChangeEvent}, Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{LanguageServer.TextDocumentContentChangeEvent}, Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{LanguageServer.TextDocumentContentChangeEvent}, Tuple{Array{Any, 1}}}})
precompile(Tuple{Type{LanguageServer.TextDocumentContentChangeEvent}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.Range}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.Position}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.TextDocumentContentChangeEvent}, LanguageServer.Range, Int64, String})
precompile(Tuple{Type{NamedTuple{(:inds,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base._any), typeof(CSTParser.has_error), Nothing, Base.Colon})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:inds,), Tuple{Bool}}, Symbol})
precompile(Tuple{typeof(Base.rem), UInt16, Type{UInt32}})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.textDocument_didChange_notification), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.DidChangeTextDocumentParams})
precompile(Tuple{typeof(Base.any), Function, Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(Base._any), typeof(CSTParser.has_error), Array{CSTParser.EXPR, 1}, Base.Colon})
precompile(Tuple{typeof(Base.setdiff), Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.vectorfilter), Type, Base.var"#132#133"{typeof(Base.in), typeof(Base.pop!), Base.Set{Int64}}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Type{Int64}, Base.Generator{Base.Iterators.Filter{Base.var"#134#135"{Base.var"#132#133"{typeof(Base.in), typeof(Base.pop!), Base.Set{Int64}}}, Base.UnitRange{Int64}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base.getindex), Array{CSTParser.EXPR, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.typed_vcat), Type{CSTParser.EXPR}, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}})
precompile(Tuple{typeof(StaticLint.semantic_pass), LanguageServer.Document, Array{CSTParser.EXPR, 1}})
precompile(Tuple{Type{StaticLint.Toplevel{T} where T}, LanguageServer.Document, Array{String, 1}, StaticLint.Scope, Bool, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}, Array{CSTParser.EXPR, 1}, StaticLint.ExternalEnv, LanguageServer.LanguageServerInstance})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.RequestType{LanguageServer.TextDocumentPositionParams, Union{Union{Union{Nothing, Array{LanguageServer.Location, 1}}, Array{LanguageServer.LocationLink, 1}}, LanguageServer.Location}}})
precompile(Tuple{Type{LanguageServer.TextDocumentPositionParams}, Base.Dict{String, Any}})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.textDocument_definition_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.TextDocumentPositionParams})
precompile(Tuple{typeof(LanguageServer.get_definitions), StaticLint.Binding, StaticLint.Scope, StaticLint.ExternalEnv, Array{LanguageServer.Location, 1}})
precompile(Tuple{Type{LanguageServer.Range}, LanguageServer.Document, Base.UnitRange{Int64}})
precompile(Tuple{typeof(JSONRPC.get_return_type), JSONRPC.RequestType{LanguageServer.TextDocumentPositionParams, Union{Union{Union{Nothing, Array{LanguageServer.Location, 1}}, Array{LanguageServer.LocationLink, 1}}, LanguageServer.Location}}})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Array{LanguageServer.Location, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Array{LanguageServer.Location, 1}}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{LanguageServer.Location, 1}})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.RequestType{LanguageServer.ReferenceParams, Union{Nothing, Array{LanguageServer.Location, 1}}}})
precompile(Tuple{Type{LanguageServer.ReferenceParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.ReferenceContext}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.ReferenceParams}, LanguageServer.TextDocumentIdentifier, LanguageServer.Position, Base.Missing, Base.Missing, LanguageServer.ReferenceContext})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.textDocument_references_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.ReferenceParams})
precompile(Tuple{LanguageServer.var"#130#131"{Array{LanguageServer.Location, 1}}, CSTParser.EXPR, LanguageServer.Document, Int64})
precompile(Tuple{typeof(JSONRPC.get_return_type), JSONRPC.RequestType{LanguageServer.ReferenceParams, Union{Nothing, Array{LanguageServer.Location, 1}}}})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.RequestType{LanguageServer.TextDocumentPositionParams, Union{Nothing, LanguageServer.Hover}}})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.textDocument_hover_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.TextDocumentPositionParams})
precompile(Tuple{Type{NamedTuple{(:show_definition,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(LanguageServer.maybe_get_doc_expr), Nothing})
precompile(Tuple{typeof(Base.coalesce), Base.Missing, String})
precompile(Tuple{typeof(LanguageServer.get_hover), CSTParser.EXPR, String, LanguageServer.LanguageServerInstance})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, SymbolServer.VarRef})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, SymbolServer.VarRef, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, SymbolServer.FakeTypeName})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, SymbolServer.FakeTypeofVararg})
precompile(Tuple{typeof(LanguageServer.get_closer_hover), CSTParser.EXPR, String})
precompile(Tuple{typeof(LanguageServer.get_fcall_position), CSTParser.EXPR, String})
precompile(Tuple{typeof(JSONRPC.get_return_type), JSONRPC.RequestType{LanguageServer.TextDocumentPositionParams, Union{Nothing, LanguageServer.Hover}}})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, LanguageServer.Hover})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, LanguageServer.Hover}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.Hover})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.Hover, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.MarkupContent})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.RequestType{LanguageServer.TextDocumentPositionParams, Union{Nothing, LanguageServer.SignatureHelp}}})
precompile(Tuple{Type{Base.Generator{Nothing, LanguageServer.var"#226#228"}}, Function, Nothing})
precompile(Tuple{Type{Base.Generator{Base.Generator{Nothing, LanguageServer.var"#226#228"}, typeof(Base.identity)}}, Function, Base.Generator{Nothing, LanguageServer.var"#226#228"}})
precompile(Tuple{typeof(Base.convert), Type{Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, LanguageServer.var"#226#228"}}, Base.Fix1{Type{Base.MappingRF{F, T} where T where F}, LanguageServer.var"#226#228"}})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{LanguageServer.var"#226#228", Base.BottomRF{typeof(Base.add_sum)}}, Base._InitialValue, Nothing})
precompile(Tuple{typeof(Base.foldl_impl), Base.MappingRF{LanguageServer.var"#226#228", Base.BottomRF{typeof(Base.add_sum)}}, Base._InitialValue, Nothing})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.add_sum), Base._InitialValue, Base.Generator{Nothing, LanguageServer.var"#226#228"}})
precompile(Tuple{Base.var"##mapfoldl#259", Base._InitialValue, typeof(Base.mapfoldl), Function, Function, Base.Generator{Nothing, LanguageServer.var"#226#228"}})
precompile(Tuple{typeof(Base.mapfoldl), Function, Function, Base.Generator{Nothing, LanguageServer.var"#226#228"}})
precompile(Tuple{Base.var"##mapreduce#263", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.mapreduce), Function, Function, Base.Generator{Nothing, LanguageServer.var"#226#228"}})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Base.Generator{Nothing, LanguageServer.var"#226#228"}})
precompile(Tuple{Base.var"##sum#266", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.sum), Function, Base.Generator{Nothing, LanguageServer.var"#226#228"}})
precompile(Tuple{typeof(Base.sum), Function, Base.Generator{Nothing, LanguageServer.var"#226#228"}})
precompile(Tuple{Base.var"##sum#267", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.sum), Base.Generator{Nothing, LanguageServer.var"#226#228"}})
precompile(Tuple{typeof(Base.sum), Base.Generator{Nothing, LanguageServer.var"#226#228"}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{LanguageServer.var"#226#228", Base.BottomRF{typeof(Base.add_sum)}}, Type{CSTParser.EXPR}})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.textDocument_signatureHelp_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.TextDocumentPositionParams})
precompile(Tuple{typeof(LanguageServer.get_signatures), SymbolServer.FunctionStore, StaticLint.Scope, Array{LanguageServer.SignatureInformation, 1}, StaticLint.ExternalEnv})
precompile(Tuple{typeof(Base.string), SymbolServer.FakeTypeName})
precompile(Tuple{Type{LanguageServer.ParameterInformation}, String, String})
precompile(Tuple{typeof(Base.string), SymbolServer.FakeTypeofVararg})
precompile(Tuple{Type{LanguageServer.SignatureHelp}, Array{LanguageServer.SignatureInformation, 1}, Int64, Int64})
precompile(Tuple{typeof(JSONRPC.get_return_type), JSONRPC.RequestType{LanguageServer.TextDocumentPositionParams, Union{Nothing, LanguageServer.SignatureHelp}}})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, LanguageServer.SignatureHelp})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, LanguageServer.SignatureHelp}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.SignatureHelp})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.SignatureHelp, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{LanguageServer.SignatureInformation, 1}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.SignatureInformation, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{LanguageServer.ParameterInformation, 1}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.ParameterInformation, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.RequestType{LanguageServer.PrepareRenameParams, Union{Nothing, LanguageServer.Range}}})
precompile(Tuple{Type{LanguageServer.PrepareRenameParams}, Base.Dict{String, Any}})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.textDocument_prepareRename_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.PrepareRenameParams})
precompile(Tuple{typeof(JSONRPC.get_return_type), JSONRPC.RequestType{LanguageServer.PrepareRenameParams, Union{Nothing, LanguageServer.Range}}})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, LanguageServer.Range})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, LanguageServer.Range}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.Range})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.RequestType{LanguageServer.RenameParams, Union{Nothing, LanguageServer.WorkspaceEdit}}})
precompile(Tuple{Type{LanguageServer.RenameParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.RenameParams}, LanguageServer.TextDocumentIdentifier, LanguageServer.Position, Base.Missing, String})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.textDocument_rename_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.RenameParams})
precompile(Tuple{typeof(JSONRPC.get_return_type), JSONRPC.RequestType{LanguageServer.RenameParams, Union{Nothing, LanguageServer.WorkspaceEdit}}})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, LanguageServer.WorkspaceEdit})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, LanguageServer.WorkspaceEdit}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.WorkspaceEdit})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.WorkspaceEdit, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{LanguageServer.TextDocumentEdit, 1}})
precompile(Tuple{typeof(CSTParser.julia_normalization_map), Int32, Ptr{Nothing}})
precompile(Tuple{typeof(CSTParser.to_codeobject), CSTParser.EXPR})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSTParser.to_codeobject), Tuple{Base.Broadcast.Extruded{Array{CSTParser.EXPR, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSTParser.to_codeobject), Tuple{Base.Broadcast.Extruded{Array{CSTParser.EXPR, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSTParser.to_codeobject), Tuple{Base.Broadcast.Extruded{Array{CSTParser.EXPR, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Any}})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSTParser.to_codeobject), Tuple{Base.Broadcast.Extruded{Array{CSTParser.EXPR, 1}, Tuple{Bool}, Tuple{Int64}}}}, QuoteNode, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSTParser.to_codeobject), Tuple{Base.Broadcast.Extruded{Array{CSTParser.EXPR, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Expr}})
precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Expr, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSTParser.to_codeobject), Tuple{Base.Broadcast.Extruded{Array{CSTParser.EXPR, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!), Array{Any, 1}, Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(CSTParser.to_codeobject), Tuple{Base.Broadcast.Extruded{Array{CSTParser.EXPR, 1}, Tuple{Bool}, Tuple{Int64}}}}, Expr, Int64, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Nothing})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Nothing}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Nothing}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Nothing})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.RequestType{LanguageServer.CodeActionParams, Union{Union{Nothing, Array{LanguageServer.CodeAction, 1}}, Array{LanguageServer.Command, 1}}}})
precompile(Tuple{Type{LanguageServer.CodeActionParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CodeActionContext}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{LanguageServer.Diagnostic}, Tuple{Array{Any, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{LanguageServer.Diagnostic}, Tuple{Array{Any, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{LanguageServer.Diagnostic}, Tuple{Array{Any, 1}}}})
precompile(Tuple{Type{LanguageServer.Diagnostic}, Base.Dict{String, Any}})
precompile(Tuple{Type{LanguageServer.CodeActionContext}, Array{LanguageServer.Diagnostic, 1}, Base.Missing})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.textDocument_codeAction_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.CodeActionParams})
precompile(Tuple{Type{NamedTuple{(:with_docstring,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{LanguageServer.var"#218#219", CSTParser.EXPR, Vararg{Any}})
precompile(Tuple{LanguageServer.var"#is_in_function_signature##kw", NamedTuple{(:with_docstring,), Tuple{Bool}}, typeof(LanguageServer.is_in_function_signature), CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{typeof(LanguageServer.is_in_docstring_for_function), CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#204#206", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{typeof(Base.in), StaticLint.LintCodes, Tuple{StaticLint.LintCodes, StaticLint.LintCodes}})
precompile(Tuple{typeof(Base.in), LanguageServer.Document, Tuple{StaticLint.LintCodes, StaticLint.LintCodes}})
precompile(Tuple{typeof(LanguageServer.is_in_function_signature), CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#190#191", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#192#194", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#200#202", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{typeof(Base.:(==)), StaticLint.LintCodes, StaticLint.LintCodes})
precompile(Tuple{typeof(Base.:(==)), LanguageServer.Document, StaticLint.LintCodes})
precompile(Tuple{LanguageServer.var"#188#189", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#214#215", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#186#187", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#196#198", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#210#212", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{LanguageServer.var"#208#209", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{Type{NamedTuple{(:inraw,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:inraw,), Tuple{Bool}}, Symbol})
precompile(Tuple{LanguageServer.var"#216#217", CSTParser.EXPR, LanguageServer.CodeActionParams})
precompile(Tuple{typeof(JSONRPC.get_return_type), JSONRPC.RequestType{LanguageServer.CodeActionParams, Union{Union{Nothing, Array{LanguageServer.CodeAction, 1}}, Array{LanguageServer.Command, 1}}}})
precompile(Tuple{typeof(JSONRPC.send_success_response), JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Base.Dict{String, Any}, Array{LanguageServer.CodeAction, 1}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Pair{String, String}, Pair{String, Int64}, Pair{String, Array{LanguageServer.CodeAction, 1}}}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{LanguageServer.CodeAction, 1}})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.CodeAction, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.Command})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.Command, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, LanguageServer.URIs2.URI})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Int64})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.CodeAction, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.RequestType{LanguageServer.ExecuteCommandParams, Any}})
precompile(Tuple{Type{LanguageServer.ExecuteCommandParams}, Base.Dict{String, Any}})
precompile(Tuple{Type{Array{Any, 1}}, Array{Any, 1}})
precompile(Tuple{Type{LanguageServer.ExecuteCommandParams}, Base.Missing, String, Array{Any, 1}})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.workspace_executeCommand_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, LanguageServer.ExecuteCommandParams})
precompile(Tuple{typeof(LanguageServer.get_expr), CSTParser.EXPR, Int64})
precompile(Tuple{typeof(Base.afoldl), Function, Base.Missing})
precompile(Tuple{typeof(LanguageServer.add_docstring_template), CSTParser.EXPR, LanguageServer.LanguageServerInstance, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, LanguageServer.ApplyWorkspaceEditParams})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.ApplyWorkspaceEditParams, Tuple{Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.WorkspaceEdit})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, LanguageServer.VersionedTextDocumentIdentifier})
precompile(Tuple{Type{JSON.Writer.CompositeTypeWrapper{T} where T}, LanguageServer.VersionedTextDocumentIdentifier, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol, Array{LanguageServer.TextEdit, 1}})
precompile(Tuple{typeof(JSONRPC.typed_res), Base.Dict{String, Any}, Type{LanguageServer.ApplyWorkspaceEditResponse}})
precompile(Tuple{Type{LanguageServer.ApplyWorkspaceEditResponse}, Bool, Base.Missing})
precompile(Tuple{typeof(JSONRPC.get_return_type), JSONRPC.RequestType{LanguageServer.ExecuteCommandParams, Any}})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.RequestType{Nothing, Nothing}})
precompile(Tuple{LanguageServer.var"#98#99"{typeof(LanguageServer.shutdown_request), LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Nothing})
precompile(Tuple{typeof(JSONRPC.get_return_type), JSONRPC.RequestType{Nothing, Nothing}})
precompile(Tuple{typeof(JSONRPC.get_param_type), JSONRPC.NotificationType{Nothing}})
precompile(Tuple{LanguageServer.var"#102#105"{LanguageServer.LanguageServerInstance}, JSONRPC.JSONRPCEndpoint{Base.PipeEndpoint, Base.PipeEndpoint}, Nothing})
precompile(Tuple{typeof(Base.uvfinalize), Sockets.PipeServer})
