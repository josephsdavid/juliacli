precompile(Tuple{Type{NamedTuple{(:stderr, :stdout), T} where T<:Tuple}, Tuple{Base.TTY, Base.TTY}})
precompile(Tuple{Base.var"#pipeline##kw", NamedTuple{(:stderr, :stdout), Tuple{Base.TTY, Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(URIs.__init__)})
precompile(Tuple{typeof(JuliaCLI.activate)})
precompile(Tuple{Type{Pkg.Versions.VersionBound}, Tuple{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Pkg.Versions.VersionBound}, Pkg.Versions.VersionBound})
precompile(Tuple{Type{Pkg.Versions.VersionBound}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Pkg.Versions.semver_interval), Base.RegexMatch})
precompile(Tuple{typeof(Base.push!), Array{Pkg.Versions.VersionRange, 1}, Pkg.Versions.VersionRange})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(JuliaCLI.activate), String})
precompile(Tuple{typeof(Base.:(==)), Base.UUID, Base.UUID})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{typeof(JuliaCLI.add), String})
precompile(Tuple{Pkg.API.var"##add#29", Base.TTY, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.add), Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{Type{Pkg.Registry.RegistryInstance}, String, String, Base.UUID, String, String, Base.Dict{Base.UUID, Pkg.Registry.PkgEntry}, Nothing, Nothing, Base.Dict{String, Base.UUID}})
precompile(Tuple{Type{Pkg.Registry.RegistryInstance}, String, String, Base.UUID, String, String, Base.Dict{Base.UUID, Pkg.Registry.PkgEntry}, Base.SHA1, Base.Dict{String, String}, Base.Dict{String, Base.UUID}})
precompile(Tuple{Pkg.API.var"#add##kw", NamedTuple{(:io,), Tuple{Base.TTY}}, typeof(Pkg.API.add), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{Pkg.Registry.var"#update##kw", NamedTuple{(:io,), Tuple{Base.TTY}}, typeof(Pkg.Registry.update)})
precompile(Tuple{Pkg.PlatformEngines.var"##download#15", Bool, Array{Pair{String, String}, 1}, Nothing, Base.TTY, typeof(Pkg.PlatformEngines.download), String, String})
precompile(Tuple{Pkg.PlatformEngines.var"#handle_auth_error##kw", NamedTuple{(:verbose,), Tuple{Bool}}, typeof(Pkg.PlatformEngines.handle_auth_error), String, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SHA1})
precompile(Tuple{Type{NamedTuple{(:transfer_progress, :credentials), T} where T<:Tuple}, Tuple{Ptr{Nothing}, Ptr{Nothing}}})
precompile(Tuple{Base.var"##s82#216", Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:transfer_progress, :credentials), Tuple{Ptr{Nothing}, Ptr{Nothing}}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:payload,), Tuple{Base.Dict{Symbol, Any}}}, NamedTuple{(:transfer_progress, :credentials), Tuple{Ptr{Nothing}, Ptr{Nothing}}}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:payload, :transfer_progress, :credentials), Tuple{Base.Dict{Symbol, Any}, Ptr{Nothing}, Ptr{Nothing}}}, Type{LibGit2.RemoteCallbacks}})
precompile(Tuple{Type{LibGit2.GitCredential}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Nothing, Nothing})
precompile(Tuple{typeof(Base.write), Base.Process, String, String, Vararg{Any}})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.write), Base.Process, Char})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, UInt8})
precompile(Tuple{LibGit2.var"#93#94"{Base.Process}})
precompile(Tuple{typeof(Base.readuntil), Base.PipeEndpoint, Char})
precompile(Tuple{typeof(Base.write), Base.Process, String, Base.SecretBuffer, Vararg{Any}})
precompile(Tuple{Base.var"#666#667"{Downloads.Curl.var"#19#23"{Downloads.Curl.Multi}, Base.Timer}})
precompile(Tuple{Type{NamedTuple{(:headers, :progress), T} where T<:Tuple}, Tuple{Array{Pair{String, String}, 1}, Pkg.PlatformEngines.var"#16#18"{Base.TTY, Pkg.MiniProgressBars.MiniProgressBar}}})
precompile(Tuple{Downloads.var"#download##kw", NamedTuple{(:headers, :progress), Tuple{Array{Pair{String, String}, 1}, Pkg.PlatformEngines.var"#16#18"{Base.TTY, Pkg.MiniProgressBars.MiniProgressBar}}}, typeof(Downloads.download), String, String})
precompile(Tuple{typeof(ArgTools.arg_read), Downloads.var"#7#16"{Base.IOStream, Nothing, Array{Pair{String, String}, 1}, Float64, Downloads.var"#24#27"{Pkg.PlatformEngines.var"#16#18"{Base.TTY, Pkg.MiniProgressBars.MiniProgressBar}}, Bool, Nothing, Bool, String, Bool, Bool}, Base.DevNull})
precompile(Tuple{Downloads.var"#13#22"{Downloads.Curl.Easy, Downloads.var"#24#27"{Pkg.PlatformEngines.var"#16#18"{Base.TTY, Pkg.MiniProgressBars.MiniProgressBar}}}})
precompile(Tuple{typeof(Base.close), LibGit2.GitAnnotated})
precompile(Tuple{typeof(Base.close), LibGit2.GitConfigIter})
precompile(Tuple{typeof(Base.final_shred!), Base.SecretBuffer})
precompile(Tuple{typeof(Base.close), LibGit2.GitDiff})
precompile(Tuple{typeof(Pkg.Operations._resolve), Base.TTY, Pkg.Types.EnvCache, Array{Pkg.Registry.RegistryInstance, 1}, Array{Pkg.Types.PackageSpec, 1}, Pkg.Types.PreserveLevel, Base.VersionNumber})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Array{String, 1}, String}}, Array{String, 1}, String})
precompile(Tuple{typeof(Base.hash), Tuple{UInt64}, UInt64})
precompile(Tuple{Type{Pkg.Versions.VersionBound}, Int64, Vararg{Int64}})
precompile(Tuple{Type{Pkg.Versions.VersionBound}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Pkg.Versions.inequality_interval), Base.RegexMatch})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{UInt32}, Char})
precompile(Tuple{typeof(Base.join), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{UInt64}, Char})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt32}, Char})
precompile(Tuple{Pkg.Operations.var"#download_artifacts##kw", NamedTuple{(:platform, :julia_version, :io), Tuple{Base.BinaryPlatforms.Platform, Base.VersionNumber, Base.TTY}}, typeof(Pkg.Operations.download_artifacts), Pkg.Types.EnvCache})
precompile(Tuple{Pkg.Operations.var"#show_update##kw", NamedTuple{(:io,), Tuple{Base.TTY}}, typeof(Pkg.Operations.show_update), Pkg.Types.EnvCache, Array{Pkg.Registry.RegistryInstance, 1}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :repo, :pinned, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Pkg.Types.GitRepo, Bool, Nothing, Base.VersionNumber}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:uuid, :name, :path, :repo, :pinned, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Pkg.Types.GitRepo, Bool, Nothing, Base.VersionNumber}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :repo, :pinned, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Pkg.Types.GitRepo, Bool, Nothing, Pkg.Versions.VersionSpec}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:uuid, :name, :path, :repo, :pinned, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Pkg.Types.GitRepo, Bool, Nothing, Pkg.Versions.VersionSpec}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Base.:(==)), Pkg.Versions.VersionSpec, Pkg.Versions.VersionSpec})
precompile(Tuple{typeof(Pkg.MiniProgressBars.start_progress), Base.TTY, Pkg.MiniProgressBars.MiniProgressBar})
precompile(Tuple{typeof(Pkg.MiniProgressBars.end_progress), Base.TTY, Pkg.MiniProgressBars.MiniProgressBar})
precompile(Tuple{typeof(Pkg.Registry.download_default_registries), Base.TTY})
precompile(Tuple{Type{Array{Pkg.Types.PackageSpec, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Serialization.deserialize_fillarray!), Array{Pkg.Types.PackageSpec, 1}, Serialization.Serializer{Base.IOStream}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :version, :tree_hash), T} where T<:Tuple}, Tuple{Base.UUID, String, Base.VersionNumber, Nothing}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:uuid, :name, :version, :tree_hash), Tuple{Base.UUID, String, Base.VersionNumber, Nothing}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Base.intersect!), Base.Set{Base.PkgId}, Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Base.vectorfilter), Type, Base.var"#132#133"{typeof(Base.in), typeof(Base.pop!), Base.Set{Base.PkgId}}, Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Base.collect), Type{Base.PkgId}, Base.Generator{Base.Iterators.Filter{Base.var"#134#135"{Base.var"#132#133"{typeof(Base.in), typeof(Base.pop!), Base.Set{Base.PkgId}}}, Array{Base.PkgId, 1}}, typeof(Base.identity)}})
precompile(Tuple{typeof(JuliaCLI.add), String, Vararg{String}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}})
precompile(Tuple{typeof(Pkg.Types.write_project), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{TOML.Internals.Printer.var"#printvalue##kw", NamedTuple{(:sorted, :by), Tuple{Bool, Pkg.Types.var"#30#32"}}, typeof(TOML.Internals.Printer.printvalue), Pkg.Types.var"#29#31", Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.isempty), Base.Dict{String, String}})
precompile(Tuple{typeof(Base.values), Base.Dict{String, String}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, TOML.Internals.Printer.var"#11#12", Base.ValueIterator{Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.all), Base.Generator{Base.ValueIterator{Base.Dict{String, String}}, TOML.Internals.Printer.var"#11#12"}})
precompile(Tuple{TOML.Internals.Printer.var"#_print##kw", NamedTuple{(:indent, :first_block, :sorted, :by), Tuple{Int64, Bool, Bool, Pkg.Types.var"#30#32"}}, typeof(TOML.Internals.Printer._print), Pkg.Types.var"#29#31", Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, String}, Array{String, 1}})
precompile(Tuple{typeof(Pkg.Types.write_manifest), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{TOML.Internals.Printer.var"#_print##kw", NamedTuple{(:indent, :first_block, :sorted, :by), Tuple{Int64, Bool, Bool, typeof(Base.identity)}}, typeof(TOML.Internals.Printer._print), Pkg.Types.var"#38#39", Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Array{Base.Dict{String, Any}, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.rem), UInt16, Type{UInt32}})
precompile(Tuple{TOML.Internals.Printer.var"#_print##kw", NamedTuple{(:indent, :sorted, :by), Tuple{Int64, Bool, typeof(Base.identity)}}, typeof(TOML.Internals.Printer._print), Pkg.Types.var"#38#39", Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}, Array{String, 1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64}, Char})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Pkg.Operations.var"#145#152", Base.Order.ForwardOrdering}, Tuple{Base.UUID, Pkg.Types.PackageSpec, Pkg.Types.PackageSpec}, Tuple{Base.UUID, Pkg.Types.PackageSpec, Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Pkg.Operations.var"#145#152", Base.Order.ForwardOrdering}, Tuple{Base.UUID, Nothing, Pkg.Types.PackageSpec}, Tuple{Base.UUID, Pkg.Types.PackageSpec, Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(JuliaCLI.rm), String})
precompile(Tuple{Pkg.API.var"##rm#41", Base.TTY, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.rm), Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{Pkg.API.var"#rm##kw", NamedTuple{(:io,), Tuple{Base.TTY}}, typeof(Pkg.API.rm), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Base.something), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{Pkg.Operations.var"#145#152", Base.Order.ForwardOrdering}, Tuple{Base.UUID, Pkg.Types.PackageSpec, Nothing}, Tuple{Base.UUID, Pkg.Types.PackageSpec, Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(JuliaCLI.update)})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:mode,), Tuple{Pkg.Types.PackageMode}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:mode,), Tuple{Pkg.Types.PackageMode}}})
precompile(Tuple{Pkg.API.var"#up##kw", NamedTuple{(:mode,), Tuple{Pkg.Types.PackageMode}}, typeof(Pkg.API.up), Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{Pkg.API.var"##up#53", Base.TTY, Base.Pairs{Symbol, Pkg.Types.PackageMode, Tuple{Symbol}, NamedTuple{(:mode,), Tuple{Pkg.Types.PackageMode}}}, typeof(Pkg.API.up), Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:mode,), Tuple{Pkg.Types.PackageMode}}, NamedTuple{(:io,), Tuple{Base.TTY}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:mode, :io), Tuple{Pkg.Types.PackageMode, Base.TTY}}})
precompile(Tuple{typeof(Base.isempty), NamedTuple{(:mode, :io), Tuple{Pkg.Types.PackageMode, Base.TTY}}})
precompile(Tuple{Pkg.API.var"#up##kw", NamedTuple{(:mode, :io), Tuple{Pkg.Types.PackageMode, Base.TTY}}, typeof(Pkg.API.up), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}, Base.BitArray{2}, Vararg{Base.BitArray{2}}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{2}, Base.BitArray{2}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{Pkg.Resolve.var"#86#88"{Array{Int64, 1}, Base.BitArray{1}}, Base.UnitRange{Int64}}, Pkg.Resolve.var"#85#87"{Array{Base.BitArray{2}, 1}, Array{Int64, 1}, Array{Base.BitArray{1}, 1}, Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Iterators.Filter{Pkg.Resolve.var"#86#88"{Array{Int64, 1}, Base.BitArray{1}}, Base.UnitRange{Int64}}, Pkg.Resolve.var"#85#87"{Array{Base.BitArray{2}, 1}, Array{Int64, 1}, Array{Base.BitArray{1}, 1}, Int64}}, Int64})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}, Base.BitArray{1}, Base.BitArray{1}, Vararg{Base.BitArray{1}}})
precompile(Tuple{typeof(Base.vcat), Base.BitArray{1}})
precompile(Tuple{Pkg.Operations.var"#46#51"{Bool, Pkg.Types.Context, Tuple{Base.SubString{String}, Base.Dict{Base.UUID, Base.SHA1}}, Base.Channel{Any}, Base.Channel{NamedTuple{(:pkg, :urls, :path), Tuple{Pkg.Types.PackageEntry, Base.Set{String}, String}}}}})
precompile(Tuple{Pkg.Operations.var"#install_archive##kw", NamedTuple{(:io,), Tuple{Base.TTY}}, typeof(Pkg.Operations.install_archive), Array{Pair{String, Bool}, 1}, Base.SHA1, String})
precompile(Tuple{Type{NamedTuple{(:copy_symlinks,), T} where T<:Tuple}, Tuple{Nothing}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:copy_symlinks,), Tuple{Nothing}}, Symbol})
precompile(Tuple{Tar.var"#extract##kw", NamedTuple{(:copy_symlinks,), Tuple{Nothing}}, typeof(Tar.extract), Base.Cmd, String})
precompile(Tuple{Type{NamedTuple{(:skeleton, :copy_symlinks, :set_permissions), T} where T<:Tuple}, Tuple{Base.DevNull, Bool, Bool}})
precompile(Tuple{Tar.var"#extract_tarball##kw", NamedTuple{(:skeleton, :copy_symlinks, :set_permissions), Tuple{Base.DevNull, Bool, Bool}}, typeof(Tar.extract_tarball), Function, Base.Process, String})
precompile(Tuple{Pkg.Operations.var"#download_artifacts##kw", NamedTuple{(:julia_version, :io), Tuple{Base.VersionNumber, Base.TTY}}, typeof(Pkg.Operations.download_artifacts), Pkg.Types.EnvCache})
precompile(Tuple{Pkg.Operations.var"#show_update##kw", NamedTuple{(:io, :hidden_upgrades_info), Tuple{Base.TTY, Bool}}, typeof(Pkg.Operations.show_update), Pkg.Types.EnvCache, Array{Pkg.Registry.RegistryInstance, 1}})
precompile(Tuple{typeof(Base.:(!=)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{typeof(Base.:(>)), Base.VersionNumber, Base.VersionNumber})
precompile(Tuple{Pkg.API.var"#240#269"{Pkg.MiniProgressBars.MiniProgressBar}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(JuliaCLI.resolve)})
precompile(Tuple{Pkg.API.var"##resolve#140", Base.TTY, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.resolve)})
precompile(Tuple{Type{NamedTuple{(:name, :uuid), T} where T<:Tuple}, Tuple{String, Base.UUID}})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:name, :uuid), Tuple{String, Base.UUID}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(JuliaCLI.pc)})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(:fn,), Tuple{Base.Cmd}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Base.Cmd, Tuple{Symbol}, NamedTuple{(:fn,), Tuple{Base.Cmd}}}})
precompile(Tuple{typeof(Logging.showvalue), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Cmd})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, Base.Cmd, Tuple{Symbol}, NamedTuple{(:fn,), Tuple{Base.Cmd}}}, Int64})
precompile(Tuple{Base.var"##printstyled#917", Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{Type{NamedTuple{(:use_pkg,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{JuliaCLI.var"#pc##kw", NamedTuple{(:use_pkg,), Tuple{Bool}}, typeof(JuliaCLI.pc)})
precompile(Tuple{Type{NamedTuple{(:download,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.keys), Base.Dict{Symbol, SymbolServer.ModuleStore}})
precompile(Tuple{Type{StaticLint.LintOptions}, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.convert), Type{StaticLint.LintOptions}, StaticLint.LintOptions})
precompile(Tuple{JuliaCLI.var"#runserver##kw", NamedTuple{(:download,), Tuple{Bool}}, typeof(JuliaCLI.runserver)})
precompile(Tuple{JuliaCLI.var"##runserver#4", Base.TTY, Base.TTY, Bool, typeof(JuliaCLI.runserver), String, String})
precompile(Tuple{Base.CoreLogging.var"#handle_message##kw", NamedTuple{(Symbol("pwd()"), :env, :depot), Tuple{String, String, String}}, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Module, Symbol, Symbol, String, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, String, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(Symbol("pwd()"), :env, :depot), Tuple{String, String, String}}}})
precompile(Tuple{typeof(Logging.showvalue), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.iterate), Base.Pairs{Symbol, String, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(Symbol("pwd()"), :env, :depot), Tuple{String, String, String}}}, Int64})
precompile(Tuple{typeof(Base.deepcopy_internal), Symbol, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Symbol, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Symbol, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{SymbolServer.MethodStore, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{SymbolServer.MethodStore, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Pair{Any, Any}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Pair{Any, Any}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Any, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.run), JSONRPC.JSONRPCEndpoint{Base.TTY, Base.TTY}})
precompile(Tuple{JSONRPC.var"#1#3"{JSONRPC.JSONRPCEndpoint{Base.TTY, Base.TTY}}})
precompile(Tuple{JSONRPC.var"#2#4"{JSONRPC.JSONRPCEndpoint{Base.TTY, Base.TTY}}})
precompile(Tuple{typeof(Base.:(<)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(>)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(!=)), UInt32, UInt32})
precompile(Tuple{Type{SymbolServer.FakeTypeofVararg}})
precompile(Tuple{typeof(SymbolServer.parsed_toml), Nothing})
precompile(Tuple{Type{LanguageServer.WorkDoneProgressEnd}, Base.Missing})
precompile(Tuple{LanguageServer.var"#94#96"{LanguageServer.LanguageServerInstance}})
precompile(Tuple{Type{NamedTuple{(:type,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{LanguageServer.var"#100#103"{LanguageServer.LanguageServerInstance}})
precompile(Tuple{LanguageServer.var"#101#104"{LanguageServer.LanguageServerInstance}})
precompile(Tuple{typeof(Base.display_error), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.InvalidStateException, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.GenericIOBuffer{Array{UInt8, 1}}, String})
precompile(Tuple{typeof(Base.print_type_stacktrace), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color, :bold), Tuple{Symbol, Bool}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{Any}})
precompile(Tuple{Base.var"#with_output_color##kw", NamedTuple{(:bold, :underline, :blink, :reverse, :hidden), Tuple{Bool, Bool, Bool, Bool, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{Any}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:type,), Tuple{Symbol}}, Symbol})
precompile(Tuple{JuliaCLI.var"#server##kw", NamedTuple{(:download,), Tuple{Bool}}, typeof(JuliaCLI.server)})
precompile(Tuple{typeof(JuliaCLI.runserver)})
precompile(Tuple{Type{NamedTuple{(:backlog,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.haskey), NamedTuple{(:backlog,), Tuple{Int64}}, Symbol})
precompile(Tuple{typeof(Sockets.uv_connectioncb), Ptr{Nothing}, Int32})
precompile(Tuple{SymbolServer.var"#62#65"{LanguageServer.var"#95#97"{LanguageServer.LanguageServerInstance}, Nothing, Base.Channel{Any}, String}})
precompile(Tuple{typeof(Base.setproperty!), SymbolServer.SymbolServerInstance, Symbol, Base.Process})
precompile(Tuple{typeof(JuliaCLI.server)})
precompile(Tuple{typeof(Base.notify), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{typeof(Base.uvfinalize), Sockets.PipeServer})
